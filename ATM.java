package atm;

import java.awt.BorderLayout;
import java.awt.image.BufferedImage;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.IOException;
import java.net.Socket;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;

/**
 *
 * @author Alejandro
 */
public class ATM extends javax.swing.JFrame {
    private String cuenta;
    private String nip;
    private String respuesta;
    private String ip;
         protected Socket sk;
    protected DataOutputStream datosalida;
    protected DataInputStream datoentrada;
    private int cucuenta;/* entero para cuenta de 16 digitos*/
    private int ninip;/* nip entero para la cuenta*/
    private int banco;
    private int monto;
    private int EstOp;
    private int num;
    public int bandera=0;

    /**
     * Creates new form ATM
     */
    public ATM() {
        this.ip = "10.18.13.112";
        initComponents();
        PanelImagen panelFondo= new PanelImagen();
        this.add(panelFondo, BorderLayout.CENTER);
        this.pack();
        this.setTitle("ATM");
        this.setDefaultCloseOperation(DISPOSE_ON_CLOSE);
        PnlDibujo pnlDibujo = new PnlDibujo();
        pnlDibujo.setSize(this.getSize());
        add(pnlDibujo);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents() {

        panelImagen1 = new atm.PanelImagen();
        uno = new javax.swing.JButton();
        dos = new javax.swing.JButton();
        tres = new javax.swing.JButton();
        cuatro = new javax.swing.JButton();
        cinco = new javax.swing.JButton();
        seis = new javax.swing.JButton();
        siete = new javax.swing.JButton();
        ocho = new javax.swing.JButton();
        nueve = new javax.swing.JButton();
        cero = new javax.swing.JButton();
        borrar = new javax.swing.JButton();
        cancelar = new javax.swing.JButton();
        ingresar = new javax.swing.JButton();
        retirar = new javax.swing.JButton();
        consultar = new javax.swing.JButton();
        cambio = new javax.swing.JButton();
        mensaje = new javax.swing.JTextField();
        aceptar = new javax.swing.JButton();
        cadena = new javax.swing.JTextField();
        finalizar = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        uno.setText("1");
        uno.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                unoActionPerformed(evt);
            }
        });

        dos.setText("2");
        dos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dosActionPerformed(evt);
            }
        });

        tres.setText("3");
        tres.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tresActionPerformed(evt);
            }
        });

        cuatro.setText("4");
        cuatro.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cuatroActionPerformed(evt);
            }
        });

        cinco.setText("5");
        cinco.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cincoActionPerformed(evt);
            }
        });

        seis.setText("6");
        seis.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                seisActionPerformed(evt);
            }
        });

        siete.setText("7");
        siete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sieteActionPerformed(evt);
            }
        });

        ocho.setText("8");
        ocho.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ochoActionPerformed(evt);
            }
        });

        nueve.setText("9");
        nueve.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nueveActionPerformed(evt);
            }
        });

        cero.setText("0");
        cero.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ceroActionPerformed(evt);
            }
        });

        borrar.setText("Borrar");
        borrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                borrarActionPerformed(evt);
            }
        });

        cancelar.setText("Transferencia");
        cancelar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelarActionPerformed(evt);
            }
        });

        ingresar.setFont(new java.awt.Font("Verdana", 0, 8)); // NOI18N
        ingresar.setText("Ingresar efectivo");
        ingresar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ingresarActionPerformed(evt);
            }
        });

        retirar.setFont(new java.awt.Font("Verdana", 0, 8)); // NOI18N
        retirar.setText("Retirar efectivo");
        retirar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                retirarActionPerformed(evt);
            }
        });

        consultar.setFont(new java.awt.Font("Verdana", 0, 8)); // NOI18N
        consultar.setText("Consultar ");
        consultar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                consultarActionPerformed(evt);
            }
        });

        cambio.setFont(new java.awt.Font("Verdana", 0, 8)); // NOI18N
        cambio.setText("Ingresar  no de cuenta");
        cambio.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cambioActionPerformed(evt);
            }
        });

        mensaje.setEditable(false);
        mensaje.setBackground(new java.awt.Color(0, 51, 204));
        mensaje.setForeground(new java.awt.Color(255, 255, 255));
        mensaje.setText("    BIENVENIDO A CAJEROS IAT \n  INGRESE UNA OPCIÓN PARA CONTINUAR");
        mensaje.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mensajeActionPerformed(evt);
            }
        });

        aceptar.setText("Aceptar");
        aceptar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                aceptarActionPerformed(evt);
            }
        });

        cadena.setEditable(false);
        cadena.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cadenaActionPerformed(evt);
            }
        });

        finalizar.setText("Finalizar");
        finalizar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                finalizarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout panelImagen1Layout = new javax.swing.GroupLayout(panelImagen1);
        panelImagen1.setLayout(panelImagen1Layout);
        panelImagen1Layout.setHorizontalGroup(
            panelImagen1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelImagen1Layout.createSequentialGroup()
                .addComponent(consultar, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(panelImagen1Layout.createSequentialGroup()
                .addGroup(panelImagen1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panelImagen1Layout.createSequentialGroup()
                        .addGap(86, 86, 86)
                        .addGroup(panelImagen1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(siete, javax.swing.GroupLayout.DEFAULT_SIZE, 51, Short.MAX_VALUE)
                            .addComponent(cuatro, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(uno, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(panelImagen1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(cero, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(dos, javax.swing.GroupLayout.DEFAULT_SIZE, 51, Short.MAX_VALUE)
                            .addComponent(cinco, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(ocho, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(panelImagen1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(tres, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(seis, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(nueve, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(18, 18, 18)
                        .addGroup(panelImagen1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(borrar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(cancelar, javax.swing.GroupLayout.DEFAULT_SIZE, 112, Short.MAX_VALUE)
                            .addComponent(aceptar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(finalizar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addComponent(cambio))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelImagen1Layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addGroup(panelImagen1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelImagen1Layout.createSequentialGroup()
                        .addGroup(panelImagen1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(ingresar)
                            .addComponent(retirar))
                        .addGap(287, 287, 287)
                        .addComponent(cadena, javax.swing.GroupLayout.PREFERRED_SIZE, 246, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(104, 104, 104))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelImagen1Layout.createSequentialGroup()
                        .addComponent(mensaje, javax.swing.GroupLayout.PREFERRED_SIZE, 371, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(41, 41, 41))))
        );
        panelImagen1Layout.setVerticalGroup(
            panelImagen1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelImagen1Layout.createSequentialGroup()
                .addGap(78, 78, 78)
                .addComponent(mensaje, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(8, 8, 8)
                .addGroup(panelImagen1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(panelImagen1Layout.createSequentialGroup()
                        .addComponent(ingresar, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(retirar, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED))
                    .addGroup(panelImagen1Layout.createSequentialGroup()
                        .addComponent(cadena, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(53, 53, 53)))
                .addComponent(consultar, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cambio, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(147, 147, 147)
                .addGroup(panelImagen1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(borrar)
                    .addComponent(tres)
                    .addComponent(dos)
                    .addComponent(uno))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panelImagen1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cancelar)
                    .addComponent(seis)
                    .addComponent(cinco)
                    .addComponent(cuatro))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(panelImagen1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(siete)
                    .addGroup(panelImagen1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(ocho, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(nueve)
                        .addComponent(aceptar)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panelImagen1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cero)
                    .addComponent(finalizar))
                .addGap(25, 25, 25))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(panelImagen1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(0, 1, Short.MAX_VALUE)
                .addComponent(panelImagen1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }// </editor-fold>                        

    private void cincoActionPerformed(java.awt.event.ActionEvent evt) {                                      
        // TODO add your handling code here:
        
        cuenta = cadena.getText();
        String numero = cadena.getText();
        System.out.println("BANDERA "+bandera);
        if(bandera==1)
        {
            numero = numero+"5";
            cuenta = cuenta + "5";
            cadena.setText(numero);
            System.out.println(numero);
        }else
        {
           JOptionPane.showMessageDialog(this,"Debe de ingresar su cuenta para empezar");
        }
    }                                     

    private void sieteActionPerformed(java.awt.event.ActionEvent evt) {                                      
        // TODO add your handling code here:
        cuenta = cadena.getText();
        String numero = cadena.getText();
        System.out.println("BANDERA "+bandera);
        if(bandera==1)
        {
            numero = numero+"7";
            cuenta = cuenta + "7";
            cadena.setText(numero);
            System.out.println(numero);
        }else
        {
           JOptionPane.showMessageDialog(this,"Debe de ingresar su cuenta para empezar");
        }
    }                                     

    private void unoActionPerformed(java.awt.event.ActionEvent evt) {                                    
        // TODO add your handling code here:
        cuenta = cadena.getText();
        String numero = cadena.getText();
        System.out.println("BANDERA "+bandera);
        if(bandera==1)
        {
            numero = numero+"1";
            cuenta = cuenta + "1";
            cadena.setText(numero);
            System.out.println(numero);
        }else
        {
           JOptionPane.showMessageDialog(this,"Debe de ingresar su cuenta para empezar");
        }
    }                                   

    private void dosActionPerformed(java.awt.event.ActionEvent evt) {                                    
        // TODO add your handling code here:
        cuenta = cadena.getText();
        String numero = cadena.getText();
        System.out.println("BANDERA "+bandera);
        if(bandera==1)
        {
            numero = numero+"2";
            cuenta = cuenta + "2";
            cadena.setText(numero);
            System.out.println(numero);
        }else
        {
           JOptionPane.showMessageDialog(this,"Debe de ingresar su cuenta para empezar");
        }
    }                                   

    private void tresActionPerformed(java.awt.event.ActionEvent evt) {                                     
        // TODO add your handling code here:
        cuenta = cadena.getText();
        String numero = cadena.getText();
        System.out.println("BANDERA "+bandera);
        if(bandera==1)
        {
            numero = numero+"3";
            cuenta = cuenta + "3";
            cadena.setText(numero);
            System.out.println(numero);
        }else
        {
           JOptionPane.showMessageDialog(this,"Debe de ingresar su cuenta para empezar");
        }
    }                                    

    private void cuatroActionPerformed(java.awt.event.ActionEvent evt) {                                       
        // TODO add your handling code here:
        cuenta = cadena.getText();
        String numero = cadena.getText();
        System.out.println("BANDERA "+bandera);
        if(bandera==1)
        {
            numero = numero+"4";
            cuenta = cuenta + "4";
            cadena.setText(numero);
            System.out.println(numero);
        }else
        {
           JOptionPane.showMessageDialog(this,"Debe de ingresar su cuenta para empezar");
        }
    }                                      

    private void seisActionPerformed(java.awt.event.ActionEvent evt) {                                     
        // TODO add your handling code here:
        cuenta = cadena.getText();
        String numero = cadena.getText();
        System.out.println("BANDERA "+bandera);
        if(bandera==1)
        {
            numero = numero+"6";
            cuenta = cuenta + "6";
            cadena.setText(numero);
            System.out.println(numero);
        }else
        {
           JOptionPane.showMessageDialog(this,"Debe de ingresar su cuenta para empezar");
        }
    }                                    

    private void ochoActionPerformed(java.awt.event.ActionEvent evt) {                                     
        // TODO add your handling code here:
        cuenta = cadena.getText();
        String numero = cadena.getText();
        System.out.println("BANDERA "+bandera);
        if(bandera==1)
        {
            numero = numero+"8";
            cuenta = cuenta + "8";
            cadena.setText(numero);
            System.out.println(numero);
        }else
        {
           JOptionPane.showMessageDialog(this,"Debe de ingresar su cuenta para empezar");
        }
    }                                    

    private void nueveActionPerformed(java.awt.event.ActionEvent evt) {                                      
        // TODO add your handling code here:
        cuenta = cadena.getText();
        String numero = cadena.getText();
        System.out.println("BANDERA "+bandera);
        if(bandera==1)
        {
            numero = numero+"9";
            cuenta = cuenta + "9";
            cadena.setText(numero);
            System.out.println(numero);
        }else
        {
           JOptionPane.showMessageDialog(this,"Debe de ingresar su cuenta para empezar");
        }
    }                                     

    private void ceroActionPerformed(java.awt.event.ActionEvent evt) {                                     
        // TODO add your handling code here:
        cuenta = cadena.getText();
        String numero = cadena.getText();
        System.out.println("BANDERA "+bandera);
        if(bandera==1)
        {
            numero = numero+"0";
            cuenta = cuenta + "0";
            cadena.setText(numero);
            System.out.println(numero);
        }else
        {
           JOptionPane.showMessageDialog(this,"Debe de ingresar su cuenta para empezar");
        }
    }                                    

    private void borrarActionPerformed(java.awt.event.ActionEvent evt) {                                       
        // TODO add your handling code here:
        
        
        //numero.charAt(numero.length()-1)="";
        cuenta = cadena.getText();
        String numero = cadena.getText();
        System.out.println("BANDERA "+bandera);
        if(bandera==1)
        {
            String nuevo = numero.substring(0,numero.length()-1);
            System.out.println(nuevo);
            cadena.setText(nuevo);
        }else
        {
           JOptionPane.showMessageDialog(this,"Debe de ingresar su cuenta para empezar");
        }
    }                                      

    private void cancelarActionPerformed(java.awt.event.ActionEvent evt) {                                         
        // TODO add your handling code here:
        // TODO add your handling code here:
        cuenta = cadena.getText();
          String cadan=cadena.getText();
        String numero = cadena.getText();
        System.out.println("BANDERA "+bandera);
        if(bandera==1)
        {
            mensaje.setText("INGRESE MONTO A transferir: ");
            String j1;
        if (!cadan.isEmpty()) //AQUI IRIA LA validacion de la caedena ingresada verificandose en la base
        {
            j1 = JOptionPane.showInputDialog("Monto a transferir");
            monto=Integer.parseInt(j1);
	    while (j1.equals("")) 
            {
		j1 = JOptionPane.showInputDialog("Debe ingresar monto transferir");
               monto=Integer.parseInt(j1);
                
	    }
            try {
                sk = new Socket(ip, 10578);
                datosalida = new DataOutputStream(sk.getOutputStream());
                datoentrada = new DataInputStream(sk.getInputStream());
                datosalida.writeInt(ninip);/*nip */
                datosalida.writeInt(num);/*cuenta*/
                datosalida.writeInt(6);/*operacion retirar*/
                datosalida.writeInt(monto);/* cantidad*/
                respuesta= datoentrada.readUTF();
                EstOp=datoentrada.readInt();
               
                if(EstOp==0)
                {
                   
                    mensaje.setText("Datos invalidos");
                    /*si se pudo retirar*/
                    cadena.setText("");
                   
                }
                else
                {
                    mensaje.setText(respuesta);
                    //dialogo.setVisible(true);/* si se pudo*/
                }
                sk.close();
                datosalida.close();
                datoentrada.close();
                 
            } catch (IOException ex) {
                Logger.getLogger(ATM.class.getName()).log(Level.SEVERE, null, ex);
            }
           
            
        }else
        {
           JOptionPane.showMessageDialog(this,"Debe de ingresar su cuenta para empezar");
        }
        }
    }                                        

    private void ingresarActionPerformed(java.awt.event.ActionEvent evt) {                                         
        // TODO add your handling code here:
        String j1;
        cuenta = cadena.getText();
        String cadan=cadena.getText();
        String numero = cadena.getText();
        System.out.println("BANDERA "+bandera);
        if(bandera==1)
        {
            mensaje.setText("INGRESE MONTO: ");
            if (!cadan.isEmpty()) //AQUI IRIA LA validacion de la caedena ingresada verificandose en la base
         {
            j1 = JOptionPane.showInputDialog("monto a  abonar");
            monto=Integer.parseInt(j1);
	    while (j1.equals("")) 
            {
		j1 = JOptionPane.showInputDialog("Debe ingresar monto a retirar");
               monto=Integer.parseInt(j1);
                
	    }
            try {
                sk = new Socket(ip, 10578);
                datosalida = new DataOutputStream(sk.getOutputStream());
                datoentrada = new DataInputStream(sk.getInputStream());
                datosalida.writeInt(ninip);/*nip */
                datosalida.writeInt(num);/*cuenta*/
                datosalida.writeInt(3);/*operacion retirar*/
                datosalida.writeInt(monto);/* cantidad*/
                respuesta= datoentrada.readUTF();
                EstOp=datoentrada.readInt();
               
                if(EstOp==0)
                {
                   
                   mensaje.setText("Error en la transaccion");/*si se pudo retirar*/
                    cadena.setText("");
                   
                }
                else
                {
                    mensaje.setText(respuesta);
                    //dialogo.setVisible(true);/* si se pudo*/
                }
                sk.close();
                datosalida.close();
                datoentrada.close();
                 
            } catch (IOException ex) {
                Logger.getLogger(ATM.class.getName()).log(Level.SEVERE, null, ex);
            }
            
        }else
        {
           JOptionPane.showMessageDialog(this,"Debe de ingresar su cuenta para empezar");
        }
        
    }                                        
    }
    private void retirarActionPerformed(java.awt.event.ActionEvent evt) {                                        
        // TODO add your handling code here:
        cuenta = cadena.getText();
          String cadan=cadena.getText();
        String numero = cadena.getText();
        System.out.println("BANDERA "+bandera);
        if(bandera==1)
        {
            mensaje.setText("INGRESE MONTO A RETIRAR: ");
            String j1;
        if (!cadan.isEmpty()) //AQUI IRIA LA validacion de la caedena ingresada verificandose en la base
        {
            j1 = JOptionPane.showInputDialog("monto a retirar");
            monto=Integer.parseInt(j1);
	    while (j1.equals("")) 
            {
		j1 = JOptionPane.showInputDialog("Debe ingresar monto a retirar");
               monto=Integer.parseInt(j1);
                
	    }
            try {
                sk = new Socket(ip, 10578);
                datosalida = new DataOutputStream(sk.getOutputStream());
                datoentrada = new DataInputStream(sk.getInputStream());
                datosalida.writeInt(ninip);/*nip */
                datosalida.writeInt(num);/*cuenta*/
                datosalida.writeInt(2);/*operacion retirar*/
                datosalida.writeInt(monto);/* cantidad*/
                respuesta= datoentrada.readUTF();
                EstOp=datoentrada.readInt();
               
                if(EstOp==0)
                {
                   
                    mensaje.setText("Credito insuficiente, favor de ingresar otra cantidad");
                    /*si se pudo retirar*/
                    cadena.setText("");
                   
                }
                else
                {
                    mensaje.setText(respuesta);
                    //dialogo.setVisible(true);/* si se pudo*/
                }
                sk.close();
                datosalida.close();
                datoentrada.close();
                 
            } catch (IOException ex) {
                Logger.getLogger(ATM.class.getName()).log(Level.SEVERE, null, ex);
            }
           
            
        }else
        {
           JOptionPane.showMessageDialog(this,"Debe de ingresar su cuenta para empezar");
        }
    }                                       
    }
    private void consultarActionPerformed(java.awt.event.ActionEvent evt) {                                          
        // TODO add your handling code here:
        cuenta = cadena.getText();
        String numero = cadena.getText();
        System.out.println("BANDERA "+bandera);
        if(bandera==1)
        {
            
            try {
                sk = new Socket(ip, 10578);
                datosalida = new DataOutputStream(sk.getOutputStream());
                datoentrada = new DataInputStream(sk.getInputStream());
                datosalida.writeInt(ninip);/*nip */
                datosalida.writeInt(num);/*cuenta*/
                datosalida.writeInt(4);/*operacion retirar*/
                datosalida.writeInt(monto);/* cantidad*/
                respuesta= datoentrada.readUTF();
                EstOp=datoentrada.readInt();
                if(EstOp==0)
                {
                   
                   mensaje.setText("Error en la consulta");/*si se pudo retirar*/
                    cadena.setText("");
                   
                }
                else
                {
                    mensaje.setText("Efectivo disponible:"+respuesta);
                    //dialogo.setVisible(true);/* si se pudo*/
                }
                sk.close();
                datosalida.close();
                datoentrada.close();
                 
            } catch (IOException ex) {
                Logger.getLogger(ATM.class.getName()).log(Level.SEVERE, null, ex);
            }
            
        }else
        {
           JOptionPane.showMessageDialog(this,"Debe de ingresar su cuenta para empezar");
        }
    }                                         

    private void cambioActionPerformed(java.awt.event.ActionEvent evt) {                                       
        // TODO add your handling code here:
        mensaje.setText("INGRESE SU NUMERO DE CUENTA: ");
        bandera=1;
        //mensaje.setText("INGRESE MONTO: ");
        System.out.println("Bandera del imngresar"+bandera);
        
    }                                      

    private void mensajeActionPerformed(java.awt.event.ActionEvent evt) {                                        
        // TODO add your handling code here:
    }                                       

    private void aceptarActionPerformed(java.awt.event.ActionEvent evt) {                                        
        // TODO add your handling code here:
        String cadan=cadena.getText();
        num = Integer.parseInt(cadan);
        String j1;
        if (!cadan.isEmpty()) //AQUI IRIA LA validacion de la caedena ingresada verificandose en la base
        {
            j1 = JOptionPane.showInputDialog("Ingrese su NIP:");
            ninip=Integer.parseInt(j1);
	    while (j1.equals("")) 
            {
		j1 = JOptionPane.showInputDialog("Debe ingresar su NIP");
                ninip=Integer.parseInt(j1);
                
	    }
            try {
                sk = new Socket(ip, 10578);
                datosalida = new DataOutputStream(sk.getOutputStream());
                datoentrada = new DataInputStream(sk.getInputStream());
                datosalida.writeInt(ninip);/*nip */
                datosalida.writeInt(num);/*cuenta*/
                datosalida.writeInt(1);
                datosalida.writeInt(0);
                respuesta= datoentrada.readUTF();
                EstOp=datoentrada.readInt();
               
                if(EstOp==0)
                {
                   bandera=0;
                    mensaje.setText("Datos Invalidos");
                    cadena.setText("");
                   
                }
                else
                {
                    mensaje.setText(respuesta);
                }
                sk.close();
                datosalida.close();
                datoentrada.close();
                 
            } catch (IOException ex) {
                Logger.getLogger(ATM.class.getName()).log(Level.SEVERE, null, ex);
            }
            
        }else
        {
            mensaje.setText("DEBE INGRESAR NO. VÁLIDO");
        }
        
    }                                       

    private void cadenaActionPerformed(java.awt.event.ActionEvent evt) {                                       
        // TODO add your handling code here:
    }                                      

    private void finalizarActionPerformed(java.awt.event.ActionEvent evt) {                                          
        // TODO add your handling code here:
        mensaje.setText("GRACIAS POR SU VISITA");
        bandera=0;
        cadena.setText("");
    }                                         

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ATM.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ATM.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ATM.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ATM.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ATM().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify                     
    private javax.swing.JButton aceptar;
    private javax.swing.JButton borrar;
    private javax.swing.JTextField cadena;
    private javax.swing.JButton cambio;
    private javax.swing.JButton cancelar;
    private javax.swing.JButton cero;
    private javax.swing.JButton cinco;
    private javax.swing.JButton consultar;
    private javax.swing.JButton cuatro;
    private javax.swing.JButton dos;
    private javax.swing.JButton finalizar;
    private javax.swing.JButton ingresar;
    private javax.swing.JTextField mensaje;
    private javax.swing.JButton nueve;
    private javax.swing.JButton ocho;
    private atm.PanelImagen panelImagen1;
    private javax.swing.JButton retirar;
    private javax.swing.JButton seis;
    private javax.swing.JButton siete;
    private javax.swing.JButton tres;
    private javax.swing.JButton uno;
    // End of variables declaration                   
}
